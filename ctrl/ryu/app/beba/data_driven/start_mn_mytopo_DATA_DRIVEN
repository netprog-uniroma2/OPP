from mininet.net import Mininet
from mininet.topo import Topo,SingleSwitchTopo
from mininet.cli import CLI
from mininet.node import UserSwitch,RemoteController, OVSKernelSwitch
from mininet.term import makeTerm
import os, time, sys


"""Custom topology


host1 ---- switch1 -- switch2 ----- switch4 -- switch6 ----host2 
                  \      |              |     / 
                   \     |              |    /  
                      switch3 ------- switch5 

Adding the 'topos' dict with a key/value pair to generate our newly defined
topology enables one to pass in '--topo=mytopo' from the command line.
"""


class DataDrivenTopo( Topo ):
    "Simple topology example."

    def __init__( self, ovsk=False):
        "Create custom topo."

        # Initialize topology
        Topo.__init__( self )

        # Add hosts and switches
    #   Hosts for the first switch
        Host1 = self.addHost( 'h1', mac='00:00:00:00:00:01')


    #   Hosts for the second switch
        Host2 = self.addHost( 'h2', mac='00:00:00:00:00:02' )


    #   Switches
        switch1 = self.addSwitch( 's1' )
        switch2 = self.addSwitch( 's2' )
        switch3 = self.addSwitch( 's3' )
        switch4 = self.addSwitch( 's4' )
        switch5 = self.addSwitch( 's5' )
        switch6 = self.addSwitch( 's6' )


        # Add links
    #   hosts 1 and Switch 1
        self.addLink( Host1 , switch1 )
    #   hosts 2 and Switch 6
        self.addLink( Host2 , switch6 )


    #   swtich 1 and Switch 2
        self.addLink( switch1 , switch2 )
    #   swtich 1 and Switch 3
        self.addLink( switch1 , switch3 )


    #   swtich 2 and Switch 3
        self.addLink( switch2 , switch3 )
    #   swtich 2 and Switch 4
        self.addLink( switch2 , switch4 )


    #   swtich 3 and Switch 5
        self.addLink( switch3 , switch5 )


    #   swtich 4 and Switch 5
        self.addLink( switch4 , switch5 )
    #   swtich 4 and Switch 6
        self.addLink( switch4 , switch6 )

    #   swtich 5 and Switch 6
        self.addLink( switch5 , switch6 )                        

topos = { 'data_driven_topo': ( lambda: DataDrivenTopo() ) }

net = Mininet(topo=DataDrivenTopo(),switch=UserSwitch,controller=RemoteController,cleanup=True,autoSetMacs=True,autoStaticArp=True,listenPort=6634)
print 'Launching Mininet...'
net.start()

CLI(net)

net.stop()